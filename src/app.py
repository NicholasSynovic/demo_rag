from typing import List

import streamlit
from sentence_transformers import SentenceTransformer

from src.data import getArticles, getDataset


def stage1(data: List[str]) -> None:
    streamlit.markdown(body="## Dataset Information")
    streamlit.markdown(body=f"{len(data)} articles loaded into memory")
    streamlit.divider()

    streamlit.markdown(body="## Embedding Articles (i.e., Documents)")
    streamlit.markdown(
        body="An embedding is a mathematical representation of an object, such as text, that captures its semantic meaning and allows for comparison with other objects. Through neural network training, multiple embeddings are created for each object, linking them to others in the network. For example, the equation `embedding('king') - embedding('man') + embedding('woman')` approximates `embedding('queen)'`, demonstrating how embeddings can reveal relationships between concepts. This mathematical representation enables comparisons of objects based on similarity and distance, providing a powerful tool for analyzing and understanding language data."
    )
    streamlit.markdown(
        body="> [Source (MS Learn)](https://learn.microsoft.com/en-us/azure/architecture/ai-ml/guide/rag/rag-generating-embeddings)"
    )
    streamlit.markdown(
        body="RAG methods leverage a *pre-generated* set of embedded documents to enhance a prompt's context. The technology that powers the similarity search of embeddings is known as a vector database. For this demo, we will use the `faiss` vector database for its implementation simplicity. Embeddings are generated by leveraging an *embedding model*; a neural network that has been specifically trained to generate embeddings that effectively map related documents together in a multi-dimensional space. We will use the `all-MiniLM-L6-v2` model to create our embeddings."
    )
    createEmbeddings: bool = streamlit.button(
        label="Create embeddings",
        type="primary",
        use_container_width=True,
    )

    if createEmbeddings:
        streamlit.session_state["loadEmbeddings"] = True

    if streamlit.session_state["loadEmbeddings"]:
        st: SentenceTransformer = SentenceTransformer(
            model_name_or_path="all-MiniLM-L6-v2"
        )


def stage0() -> List[str]:
    articles: List[str] = []

    streamlit.markdown(body="# Retrieval Augmented Generation (RAG) Demo")
    streamlit.markdown(
        body="> Demo web app of using LLMs *offline* to become subject matter experts on private documents"
    )
    streamlit.divider()

    streamlit.markdown(body="## What is RAG?")
    streamlit.markdown(
        body="Retrieval-Augmented Generation (RAG) is a technique that enhances the output of large language models (LLMs) by allowing them to reference external knowledge sources or authoritative databases before generating a response. This enables LLMs to provide more relevant, accurate, and context-specific outputs for various domains without needing to retrain the model, making it a cost-effective approach."
    )
    streamlit.markdown(
        body="> [Source (AWS)](https://aws.amazon.com/what-is/retrieval-augmented-generation/)"
    )
    streamlit.divider()

    streamlit.markdown(body="## Load Data")
    streamlit.markdown(
        body="This demo uses the [`fancyzhx/ag_news`](https://huggingface.co/datasets/fancyzhx/ag_news) dataset. This dataset contains news articles from the ComeToMyHead academic news search engine from 2004 onward. There are over 1 million news articles from over 2000 news sources."
    )
    loadDatasetButton: bool = streamlit.button(
        label="Download and load dataset",
        type="primary",
        use_container_width=True,
    )

    if loadDatasetButton:
        streamlit.session_state["loadDataset"] = True

    if streamlit.session_state["loadDataset"]:
        with streamlit.spinner(text="Loading dataset..."):
            ds = getDataset()
            articles = getArticles(ds)
        streamlit.session_state["loadDataset"] = False
        streamlit.session_state["stage1"] = True

    streamlit.divider()

    return articles


def main() -> None:
    streamlit.set_page_config(page_title="RAG Demo")

    if "loadDataset" not in streamlit.session_state:
        streamlit.session_state["loadDataset"] = False

    if "stage1" not in streamlit.session_state:
        streamlit.session_state["stage1"] = False

    if "loadEmbeddings" not in streamlit.session_state:
        streamlit.session_state["loadEmbeddings"] = False

    articles: List[str] = stage0()

    if streamlit.session_state["stage1"]:
        stage1(data=articles)


if __name__ == "__main__":
    main()
